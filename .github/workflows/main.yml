name: CI

on: [push, pull_request]

env:
# TODO: get this from some context? variable
  VERSION_SET: mzagozen
  CI_PIPELINE_ID: ${{ github.run_id }}
  DOCKER_REGISTRY: ghcr.io/${{ github.repository }}/
  # The NSO_IMAGE_PATH variable is defined as a namespace variable
  # NSO_IMAGE_PATH: ghcr.io/${{ github.repository }}/
  NSO_IMAGE_PATH: ${{ vars.NSO_IMAGE_PATH }}

jobs:
  get-nso-versions:
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.get-versions.outputs.versions }}
      multi_versions: ${{ steps.get-versions.outputs.multi_versions }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Get NSO versions
      id: get-versions
      run: |
        echo "versions=$(cat version-sets/${VERSION_SET}/versions-lod.json)" >> $GITHUB_OUTPUT
        echo "multi_versions=$(cat version-sets/${VERSION_SET}/multiver-lod.json)" >> $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-latest
    needs: get-nso-versions
    strategy:
      matrix:
        include: ${{fromJson(needs.get-nso-versions.outputs.versions)}}
    env:
      NSO_VERSION: ${{ matrix.version }}
      PRE_PREFIX: "PRE_"
    steps:
    - uses: actions/checkout@v4
    - name: Set env vars from secrets context
      if: ${{ vars.PRE_SCRIPT }}
      env:
        SECRETS_CONTEXT: ${{ toJson(secrets) }}
      run: |
        # Pipe the JSON string into jq
        echo "${SECRETS_CONTEXT}" |
        # Convert JSON object into an array of key-value pairs
        jq -r 'to_entries |
        # Map over each key-value pair and select only those with keys starting with prefix defined in PRE_PREFIX
        map(select(.key | startswith("${{ env.PRE_PREFIX}}"))) |
        # Format each pair as "KEY=VALUE" with the prefix stripped and append it all to the environment file
        .[] | "\(.key|sub("${{env.PRE_PREFIX}}"; ""))=\(.value)"' >> $GITHUB_ENV
    - name: Run the PRE_SCRIPT
      if: ${{ vars.PRE_SCRIPT }}
      run: eval "${{ vars.PRE_SCRIPT }}"
    - name: Remove previously set env vars from secrets context
      env:
        SECRETS_CONTEXT: ${{ toJson(secrets) }}
      run: |
        echo "${SECRETS_CONTEXT}" |
        jq -r 'to_entries |
        map(select(.key | startswith("${{ env.PRE_PREFIX}}"))) |
        # Ideally, we should unset the environment variables, but that is not possible: https://github.com/actions/runner/issues/1126
        .[] | "\(.key|sub("${{env.PRE_PREFIX}}"; ""))="' >> $GITHUB_ENV
    - name: List nso-install-files
      run: ls -l nso-install-files
    - name: Install prerequisites
      run: |
        which expect jq sshpass xmlstarlet || (echo "Installing prerequisites..." && sudo apt-get install -qy expect jq sshpass xmlstarlet)
    - name: Building base and dev image
      run: make build
    - name: "Testing images"
      run: make test
    - name: "Testing skeletons"
      run: make test-skeletons
    - name: Login to Container Registry
      if: ${{ vars.DOCKER_PUSH != 'false' }}
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Pushing images
      if: ${{ vars.DOCKER_PUSH != 'false' }}
      run: make push

  multiver-test:
    runs-on: ubuntu-latest
    needs:
    - get-nso-versions
    - build
    # The 'matrix' context is not available within the 'needs' keyword, so it is
    # not possible to build a DAG of build and multiver test jobs where the
    # latter only depends on the specific NSO versions under test. This is not
    # ideal because by depending on the entire 'build' it becomes a choke point.
    # I guess the alternative is generating the entire CI config, jobs included,
    # like we already do for GitLab!?
    # - build-${{ matrix.version }}
    # - build-${{ matrix.old_version}}
    strategy:
      matrix:
        include: ${{fromJson(needs.get-nso-versions.outputs.multi_versions)}}
    steps:
    - uses: actions/checkout@v4
    - name: Set NSO_VERSION env vars
      run: |
        echo "NSO_VERSION=${{ matrix.version }}" >> $GITHUB_ENV
        echo "OLD_NSO_VERSION=${{ matrix.old_version }}" >> $GITHUB_ENV
    - name: Login to Container Registry
      if: ${{ vars.DOCKER_PUSH != 'false' }}
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Pulling images
      if: ${{ vars.DOCKER_PUSH != 'false' }}
      run: make pull
    - name: Testing images
      run: make test-multiver
    - name: Clean up
      run: make -C test clean

  push:
    runs-on: ubuntu-latest
    if: ${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) && vars.DOCKER_PUSH != 'false' }}
    needs:
    - get-nso-versions
    - multiver-test
    strategy:
      matrix:
        include: ${{fromJson(needs.get-nso-versions.outputs.versions)}}
    env:
      NSO_VERSION: ${{ matrix.version }}
    steps:
    - uses: actions/checkout@v4
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Pulling images
      run: make pull
    - name: Tagging release
      run: make tag-release
    - name: Pushing images
      run: make push-release
