* Skeletons for NSO in Docker git repositories
  The sub-directories herein are repository skeletons for the standard form of repositories in the NID (NSO in Docker) ecosystem, specifically:

  - *ned*: a repository skeleton for the standard form of NID NED repos
  - *package*: generally for repositories containing one or more packages, except for NEDs which are better served by the NID ned standard form
  - *system*: for working with an NSO system, for example, composing multiple other packages (like NEDs) and/or having local service packages

** Getting started with NSO in Docker
- build the nso-docker git repo, which will give you the =cisco-nso-base= and =cisco-nso-dev= image
  - ~cp ~/Downloads/nso-5.8.linux.x86_64.installer.bin nso-docker/nso-install-files~
  - ~export NSO_VERSION=5.8~
  - ~make -C nso-docker build tag-release~
- copy the =system= skeleton, this will be your NSO production system image, which you'll eventually run in your production environment
  - ~cp -av nso-docker/skeletons/system. ~my-nso-system~
- place all your packages, including your services packages and any necessary NEDs in the packages directory
  - e.g. ~mv /path/to/my-service-package my-nso-system/packages/~
  - e.g. ~mv /path/to/cisco-ios-6.44 my-nso-system/packages/~
  - e.g. ~mv /path/to/netconf-ios-xr-7.6.1 my-nso-system/packages/~
  - e.g. ~mv /path/to/nokia-sros_gnmi my-nso-system/packages/~
- build your system image
  - ~make -C my-nso-system build~
- start testenv of your NSO system image
  - ~cd my-nso-system/testenvs/quick~
  - ~make start~
  - enter CLI of NSO ~make cli~

** Using multiple repositories
Placing all your packages in a single =system= skeleton as described above is simple but has certain drawbacks;
- every build means building all packages, NEDs in particular can be very large when compared to the average service package
- packages might come from different sources or be developed by different teams, so keeping it all in one repo might be tedious

An alternative is to separate packages into their own repositories and including the built output in your system image instead. For example, to move a NED to a separate repo, based on the above example:
#+BEGIN_SRC sh
# create new repo from NED skeleton
cp -av ~/nso-docker/skeletons/ned/. ~/netconf-ios-xr-7.6.1
# move the IOS XR NED over from our system repo
mv ~/my-nso-system/packages/netconf-ios-xr-7.6.1 ~/netconf-ios-xr-7.6.1/packages/
# create include file in our system repo
echo '${PKG_PATH}netconf-ios-xr-7.6.1/package:${NSO_VERSION}' > ~/my-nso-system/includes/netconf-ios-xr-7.6.1
# build new NED
make -C ~/netconf-ios-xr-7.6.1 build tag-release
# rebuild our system image, which should now include the NED
make -C ~/my-nso-system build
#+END_SRC

NEDs tend to take longer time to compile than the average service package, mostly due to their often larger YANG models, which is why they are best kept on their own repo. In addition, NEDs are usually developed by Cisco or another party, which again is easier to track by keeping them on a separate repository.

** The package skeleton
We've covered the use of the =system= and =ned= skeleton. What about the =package= skeleton?

Most users do not need to create any repositories of their own using the =package= skeleton. It is for building generic packages that are shared in multiple projects. Most packages (that aren't NEDs) are specific to a particular project (containing services specific to a certain use case) and are best placed in the main =system= repository rather than as individual =package= skeleton repositories. The CFP (Core Function Packs) provided by Cisco are good examples of generic packages, or things like [[https://gitlab.com/nso-developer/bgworker/]], which is a generic package that could use the =package= skeletons. Note however that many Cisco CFPs are not recompilable, so it does not make sense to place them in a =package= skeleton for that reason.

** Using a skeleton
  To get started, create your new project directory and copy the content of the skeleton into the directory. Ensure you also copy files starting with '.' (dot-files).

  Place your package(s) in =/packages=, which will automatically include them in the build process. For the =ned= and =package= repo, you are only supposed to place a single package in the =/packages= folder. Only the =system= skeleton supports multiple packages.

  See the skeleton README file for more information.

  All skeletons provide a common set of make targets for interaction:

  | Make target   | Description                                                        |
  |---------------+--------------------------------------------------------------------|
  | all           | Build and test (runs =build test= targets)                         |
  | build         | Build container images                                             |
  | test          | Run tests (runs =testenv-start testenv-test testenv-stop= targets) |
  | testenv-start | Start the test environment                                         |
  | testenv-test  | Run the tests defined for the test environment                     |
  | testenv-build | Build (recompile) project in the test environment                  |
  | testenv-stop  | Stop the test environment                                          |
  | testenv-shell | Start shell in test NSO instance                                   |
  | testenv-cli   | Starts ncs_cli in test NSO instance                                |
  | dev-shell     | Start shell environment with project mounted at /src               |
  | push          | Push built Docker image(s) to registry                             |
  | tag-release   | Tag built image as release                                         |
  | push-release  | Push release tagged Docker image(s) to registry                    |

  These targets can be refined and modified for a particular project but having a uniform interface with common entrypoints means anyone can quickly become familiar and productive with the project.

** Multiple NSO packages in one repository vs multiple repositories and inclusion
   It is possible to place a single or multiple NSO packages in the same =package= or =system= skeleton. There are advantages and drawbacks to having multiple packages in the same repository and in choosing how you should place your packages there a few aspects to consider;

   - origin
     - if the code originates from an external party, like a NED from Cisco or a third party library, it is likely easier to track in its own separate repository
       - one branch can be used to track the package as received verbatim from the upstream source
       - another branch can be used to track local patches, which can be rebased on upstream branch when necessary
   - reusable
     - if a package is reusable, then it should probably be placed on its own repository so that it can be easily included from multiple consuming projects
   - compilation time
     - if it takes a long time to compile a package you want to avoid compiling it very often
   - rate of change
     - if you don't change your package very often, it could be a good idea to compile it once and then include the binary, i.e. cache the compilation
     - this is exacerbated by long compilation times, i.e. the longer compilation times and the lower rate of change, the stronger incentive to place the package in its own repository so that the build artifacts can be cached and reused

** Example system composition
   There are many ways to compose a system, this just shows one example. This shows how to build a system container for the mythical ACME Corporation.

[[./nso-docker-composition.png]]

   The nso-ned-* containers each contain a NED which is based on a Git repo of the same name. The Git repos are based on the [[./ned][ned]] skeleton.
   The nso-docker container contains the NSO base software and is built from a local clone of this [[https://gitlab.com/nso-developer/nso-docker][nso-docker]] repo.

   The acme-nso repo holds a set of local packages and it pulls in the base container as well as the two NEDs to create a final system container. The Git repo is based on the [[./system][system]] skeleton. This container can be used for testing and production.
