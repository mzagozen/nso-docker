#!/bin/sh

# First element of PYTHONPATH is the python/ directory in our package
PKG_PATH=$(dirname $(echo ${PYTHONPATH} | cut -d: -f1))

# Look for virtualenv in our package and activate, if found
if [ -n "${PKG_PATH}" ] && [ -f "${PKG_PATH}/pyvenv/bin/activate" ]; then
    echo "Activating virtualenv found in in ${PKG_PATH}";
    . ${PKG_PATH}/pyvenv/bin/activate;
fi

# Find our Python, which is in the virtualenv, if activated
if [ -x "$(which python3)" ]; then
    PYTHON=python3
else
    PYTHON=python
fi

# Grab the major / minor Python version number
PYVER=$(${PYTHON} -c 'import sys; print(str(sys.version_info[0])+"."+str(sys.version_info[1]))')

# We want to enable importing Python packages from the virtualenvs of other NSO
# packages we depend on, defined as 'required-packages' in package-meta-data.xml
# Packages listed as 'required-packages' are added after the first element in
# PYTHONPATH (with a trailing /python as it points to the Python directory of
# the package). Strip the first element and iterate over rest of PYTHONPATH,
# searching each element directory for a virtualenv and append its site-packages
# to our PYTHONPATH. Note how the virtualenv of another package could be built
# for a different version of Python, in which case things will fail.
DEP_PY_PATHS=$(echo ${PYTHONPATH} | cut -d: -f1-)
# Set IFS to deal with white space in path names
OLD_IFS=$IFS
IFS=:
for DEP_PY_PATH in ${DEP_PY_PATHS}; do
    DEP_PATH=$(dirname "$DEP_PY_PATH")
    if [ -d "${DEP_PATH}/pyvenv" ]; then
        if [ -d "${DEP_PATH}/pyvenv/lib/python${PYVER}/site-packages" ]; then
            echo "Adding virtualenv to path for dependency package at ${DEP_PATH}";
            PYTHONPATH=${PYTHONPATH}:${DEP_PATH}/pyvenv/lib/python${PYVER}/site-packages;
        else
            echo "virtualenv detected but no site-packages directory found for python${PYVER} in ${DEP_PATH}";
        fi
    fi
done
IFS=$OLD_IFS

pypath="${NCS_DIR}/src/ncs/pyapi"

# Make sure everyone finds the NCS Python libraries at startup
if [ "x$PYTHONPATH" != "x" ]; then
    PYTHONPATH=${pypath}:$PYTHONPATH
else
    PYTHONPATH=${pypath}
fi
export PYTHONPATH

# Parse arguments to extract the VM ID value passed with -i|--id. This is then
# used to compare against the value of the DEBUGPY env var. Remote debugging
# will be enabled for the Python VM with the name provided by the DEBUGPY
# variable. We use GNU getopt here to make sure we're always able to recognize
# the arguments, even if the order changes. In addition to VM ID we also handle
# -u|--upgrade, to simplify setting the main executable name.
OPTS="$@"
TEMP=`getopt -o l:f:i:us:c: --long log-level:,log-file:,id:,upgrade,self-assign-warning:,code: -n 'ncs-start-python-vm' -- "$@"`
#if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi
# Note the quotes around `$TEMP': they are essential!
eval set -- "$TEMP"

main="${pypath}/ncs_pyvm/startup.py"
while true; do
    case "$1" in
        -u | --upgrade ) main="${pypath}/ncs_pyvm/upgrade.py"; shift ;;
        -i | --id ) VMID="$2"; shift 2 ;;
        -c | --code) code="$2"; ${PYTHON} -c "${code}"; exit $? ;;
        -- ) shift; break ;;
        * ) if [ "$#" -gt 0 ]; then shift; else break; fi ;;
    esac
done

if [ -n "${DEBUGPY}" ] && [ "${DEBUGPY}" = "${VMID}" ]; then
    DEBUG=$(${PYTHON} -c 'import debugpy' > /dev/null 2>&1 && echo '-m debugpy --listen 0.0.0.0:5678')
    echo "Enabling DAP for PythonVM ${VMID}"
else
    DEBUG=""
    echo "DAP not enabled for PythonVM ${VMID}"
fi

echo "Starting ${PYTHON} -u ${DEBUG} ${main} ${OPTS}"
exec ${PYTHON} -u ${DEBUG} ${main} ${OPTS}
